#define INIT_DX_WRITER
(
   {write_file #ifdef HX_XBOX "GAME:/dx.dta" #endif #ifdef HX_PS3 "GD:/dev_hdd0/game/BLUS30463/USRDIR/dx.dta" #endif
      {array
         (
            (mtv_position
               (mtv_position $mtvpos_0 $mtvpos_1 $mtvpos_2)
            )
            (gem_colors
               (gem_colors $slot1_color $slot2_color $slot3_color $slot4_color $slot5_color)
            )
            (sustain_colors
               (sustain_colors $sus1_color $sus2_color $sus3_color $sus4_color $sus5_color)
            )
            (smasher_colors
               (smasher_colors $fret1_color $fret2_color $fret3_color $fret4_color $fret5_color)
            )
            (drum_smasher_colors
               (drum_smasher_colors $smasher1_color $smasher2_color $smasher3_color $smasher4_color)
            )
            (drum_tom_colors
               (drum_tom_colors $drum1_color $drum2_color $drum3_color $drum4_color)
            )
            (drum_cymbal_color
               (drum_cymbal_color $cym1_color $cym2_color $cym3_color $cym4_color )
            )
            (kick_color
               (kick_color $kick_color)
            )
            (main_menu_screen
               (main_menu_screen $svnumber)
            )
            (emulate_fps
               (emulate_fps $emulatefps)
            )
            (track_speed
               (track_speed $trackspeed)
            )
            (song_speed
               (song_speed $speedmod)
            )
            (animated_gem_texture
               (animated_gem_texture $animatedgemname)
            )
            (animated_smasher_texture
               (animated_smasher_texture $animatedsmashername)
            )
            (gem_texture
               (gem_texture $gem)
            )
            (sustain_texture
               (sustain_texture $sustain)
            )
            (smasher_texture
               (smasher_texture $smasher)
            )
            (crowdmeter_texture
               (crowdmeter_texture $crowdmeter)
            )
            (multiring_texture
               (multiring_texture $multiring)
            )
            (odbar_texture
               (odbar_texture $odbar)
            )
            (rails_texture
               (rails_texture $rails)
            )
            (score_texture
               (score_texture $scoretex)
            )
            (flames_texture
               (flames_texture $flames)
            )
            (voxarrow_texture
               (voxarrow_texture $voxarrow)
            )
            (voxhw_texture
               (voxhw_texture $voxhw)
            )
            (keyboard_texture
               (keyboard_texture $keyboard)
            )
            (emissive_texture
               (emissive_texture $emissive)
            )
            (emissive_color
               (emissive_color $emissive_r $emissive_g $emissive_b)
            )
            (emissive_gtr_texture
               (emissive_gtr_texture $emissivegtr)
            )
            (emissive_bass_texture
               (emissive_bass_texture $emissivebass)
            )
            (emissive_drum_texture
               (emissive_drum_texture $emissivedrum)
            )
            (emissive_keys_texture
               (emissive_keys_texture $emissivekeys)
            )
            (spotlight_texture
               (spotlight_texture $spotlight)
            )
            (spotlight_gtr_texture
               (spotlight_gtr_texture $spotlightgtr)
            )
            (spotlight_bass_texture
               (spotlight_bass_texture $spotlightbass)
            )
            (spotlight_drum_texture
               (spotlight_drum_texture $spotlightdrum)
            )
            (spotlight_keys_texture
               (spotlight_keys_texture $spotlightkeys)
            )
            (highway_texture
               (highway_texture $highway)
            )
            (highway_gtr_texture
               (highway_gtr_texture $highwaygtr)
            )
            (highway_bass_texture
               (highway_bass_texture $highwaybass)
            )
            (highway_drum_texture
               (highway_drum_texture $highwaydrum)
            )
            (highway_keys_texture
               (highway_keys_texture $highwaykeys)
            )
            (multi_angle
               (multi_angle $multiangle)
            )
            (fullcombo_sfx
               (fullcombo_sfx $fcsfx)
            )
            (toggle_postfx
               (toggle_postfx $toggle_postfx)
            )
            (rb3_venue
               (rb3_venue
                  {if_else {&& {== $force TRUE}
                                {||
                                   {== $venue small_club_01} {== $venue small_club_02} {== $venue small_club_03}
                                   {== $venue small_club_04} {== $venue small_club_05} {== $venue small_club_06}
                                   {== $venue small_club_10} {== $venue small_club_11} {== $venue small_club_13}
                                   {== $venue small_club_14} {== $venue small_club_15} {== $venue big_club_01}
                                   {== $venue big_club_02} {== $venue big_club_04} {== $venue big_club_05}
                                   {== $venue big_club_06} {== $venue big_club_07} {== $venue big_club_08}
                                   {== $venue big_club_09} {== $venue big_club_10} {== $venue big_club_11}
                                   {== $venue big_club_12} {== $venue big_club_13} {== $venue big_club_14}
                                   {== $venue big_club_15} {== $venue big_club_17} {== $venue arena_01}
                                   {== $venue arena_02} {== $venue arena_03} {== $venue arena_04}
                                   {== $venue arena_06} {== $venue arena_07} {== $venue arena_10}
                                   {== $venue arena_11} {== $venue arena_12} {== $venue festival_01}
                                   {== $venue festival_02} {== $venue none}
                                }
                            }
                     $venue
                     FALSE
                  }
               )
            )
            (mod_nosustain
               (mod_nosustain {if_else {modifier_mgr is_modifier_active mod_nosustain} TRUE FALSE})
            )
            (mod_rb2sustain
               (mod_rb2sustain {if_else {modifier_mgr is_modifier_active mod_rb2sustain} TRUE FALSE})
            )
            (mod_rb4sustain
               (mod_rb4sustain {if_else {modifier_mgr is_modifier_active mod_rb4sustain} TRUE FALSE})
            )
            (mod_rb4os
               (mod_rb4os {if_else {modifier_mgr is_modifier_active mod_rb4os} TRUE FALSE})
            )
            (mod_xboxos
               (mod_xboxos {if_else {modifier_mgr is_modifier_active mod_xboxos} TRUE FALSE})
            )
            (mod_ps3os
               (mod_ps3os {if_else {modifier_mgr is_modifier_active mod_ps3os} TRUE FALSE})
            )
            (mod_wiios
               (mod_wiios {if_else {modifier_mgr is_modifier_active mod_wiios} TRUE FALSE})
            )
         )
      }
   }
)

#define INIT_MOD_WRITER
(
   {write_file #ifdef HX_XBOX "GAME:/mod.dta" #endif #ifdef HX_PS3 "GD:/dev_hdd0/game/BLUS30463/USRDIR/mod.dta" #endif
      {array
         (
            (mod_doublespeed
              (mod_doublespeed {if_else {modifier_mgr is_modifier_active mod_doublespeed} TRUE FALSE})
            )
            (mod_staticfills
               (mod_staticfills {if_else {modifier_mgr is_modifier_active mod_staticfills} TRUE FALSE})
            )
            (mod_chord_numbers
               (mod_chord_numbers {if_else {modifier_mgr is_modifier_active mod_chord_numbers} TRUE FALSE})
            )
            (mod_nohud
               (mod_nohud {if_else {modifier_mgr is_modifier_active mod_nohud} TRUE FALSE})
            )
            (mod_miss_sounds
               (mod_miss_sounds {if_else {modifier_mgr is_modifier_active mod_miss_sounds} FALSE TRUE}) ;swapped TRUE/FALSE due to modifier being on by default
            )
            (mod_songtitle
               (mod_songtitle {if_else {modifier_mgr is_modifier_active mod_songtitle} TRUE FALSE})
            )
            (mod_whammyfx
               (mod_whammyfx {if_else {modifier_mgr is_modifier_active mod_whammyfx} TRUE FALSE})
            )
            (mod_songselectnoise
               (mod_songselectnoise {if_else {modifier_mgr is_modifier_active mod_songselectnoise} TRUE FALSE})
            )
            (mod_practiceoverdrive
               (mod_practiceoverdrive {if_else {modifier_mgr is_modifier_active mod_practiceoverdrive} TRUE FALSE})
            )
            (mod_nolanes
               (mod_nolanes {if_else {modifier_mgr is_modifier_active mod_nolanes} TRUE FALSE})
            )
            (mod_rb4lanes
               (mod_rb4lanes {if_else {modifier_mgr is_modifier_active mod_rb4lanes} TRUE FALSE})
            )
            (mod_nomv
               (mod_nomv {if_else {modifier_mgr is_modifier_active mod_nomv} TRUE FALSE})
            )
            (blur_restored
               (blur_restored $blurisbackon)
            )
            (crust_restored
               (crust_restored $crustisbackon)
            )
            (mod_blackmenu
               (mod_blackmenu {if_else {modifier_mgr is_modifier_active mod_blackmenu} TRUE FALSE})
            )
            (mod_nointro
               (mod_nointro {if_else {modifier_mgr is_modifier_active mod_nointro} TRUE FALSE})
            )
            (mod_nosfx
               (mod_nosfx {if_else {modifier_mgr is_modifier_active mod_nosfx} TRUE FALSE})
            )
            (mod_auto_kick
               (mod_auto_kick {if_else {modifier_mgr is_modifier_active mod_auto_kick} TRUE FALSE})
            )
            (mod_fcclip
               (mod_fcclip {if_else {modifier_mgr is_modifier_active mod_fcclip} TRUE FALSE})
            )
            (mod_nojurgen
               (mod_nojurgen {if_else {modifier_mgr is_modifier_active mod_nojurgen} TRUE FALSE})
            )
            (mod_synced_track_speeds
               (mod_synced_track_speeds {if_else {modifier_mgr is_modifier_active mod_synced_track_speeds} TRUE FALSE})
            )
            (mod_nopause
               (mod_nopause {if_else {modifier_mgr is_modifier_active mod_nopause} TRUE FALSE})
            )
            (mod_skipsavemsg
               (mod_skipsavemsg {if_else {modifier_mgr is_modifier_active mod_skipsavemsg} TRUE FALSE})
            )
            (mod_dx_showbpm
               (mod_dx_showbpm {if_else {modifier_mgr is_modifier_active mod_dx_showbpm} TRUE FALSE})
            )
            (mod_dx_no_overdrive
               (mod_dx_no_overdrive {if_else {modifier_mgr is_modifier_active mod_dx_no_overdrive} TRUE FALSE})
            )
         )
      }
   }
)

#define INIT_VAL_WRITER
(
   {write_file #ifdef HX_XBOX "GAME:/val.dta" #endif #ifdef HX_PS3 "GD:/dev_hdd0/game/BLUS30463/USRDIR/val.dta" #endif
      {array
         (
            (mic_vols
               (mic_vols {profile_mgr get_mic_vol 0} {profile_mgr get_mic_vol 1} {profile_mgr get_mic_vol 2})
            )
            (default_slot0
               (default_slot0 $default_slot0)
            )
            (default_slot1
               (default_slot1 $default_slot1)
            )
            (default_slot2
               (default_slot2 $default_slot2)
            )
            (default_slot3
               (default_slot3 $default_slot3)
            )
         )
      }
   }
)